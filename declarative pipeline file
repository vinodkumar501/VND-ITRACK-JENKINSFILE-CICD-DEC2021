CICD PIPLELINE STEPS
https://www.youtube.com/watch?v=f0Rbk1iVhnc&t=1230s

CHECKOUT ---> BUILD --> CODE QUALITY -->NEXUS UPLOAD --> DEV DEPLOY --> SLACK NOTIFY -->DEV APPROVAL


https://www.youtube.com/watch?v=f0Rbk1iVhnc
https://www.coachdevops.com/2020/03

pipeline {
    agent any
    tools {
        maven 'mvn-3.8.4'
    }
    stages {
        stage ('Compile Stage') {
            steps {
                    sh 'mvn clean compile'
                }
            }
        stage ('Testing Stage') {

            steps {
                    sh 'mvn test'
                }
            }
        stage ('Deployment Stage') {
            steps {
                    sh 'mvn deploy'
                }
            }
        }
    }

================================================= Jenkinsfile2 ========================================

pipeline{
  agent any
  stages{
    stage('check'){
	  steps{
	    sh 'printenv'            // first print env varialbles
	   }
	 }
    stage('build'){
	  steps{
	    echo "running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}"   
		 }
	    }
     }
}

//o/p -->running 98 and job Jenkins-basic-pipeline
//echo 'running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}'  -->print o/p -->running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}
//Single quotes won't allow substitution. Try double quotes, escaping the dollar sign:
//https://stackoverflow.com/questions/60648171/unable-to-substitute-jenkins-build-number-variable-in-pipeline-script

==================>scripted  pipeline <================== start with node { // }

node {     
//
}

===================> declarative  pipeline <==================

start with pipeline and have stages

pipeline{
  agent any  
  //
}
------------------------- Sample Jenkinsfile --------------------------
pipeline {
    agent any
    
    stages {
        stage (build) {
            steps {
                echo "build"
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

============================================ Sample Jenkinsfile2 ======================================
pipeline{
  agent any
  stages{
    stage('check'){
	  steps{
	    sh 'printenv'            // first print env varialbles
	   }
	 }
    stage('build'){
	  steps{
	    echo "running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}"   
		 }
	    }
     }
}

Note:
Declarative Pipeline supports an environment directive, whereas users of Scripted Pipeline must use the withEnv step.

============================================ Sample Jenkinsfile3 ======================================

CICD PIPLELINE STEPS
https://www.youtube.com/watch?v=f0Rbk1iVhnc&t=1230s

CHECKOUT ---> BUILD --> CODE QUALITY -->NEXUS UPLOAD --> DEV DEPLOY --> SLACK NOTIFY



//user generate pipeline script
//http://3.92.207.138:8080/job/script/pipeline-syntax/
//check pipeline script on bottom we get pipeline syntax --> click on git --> add Url and add cred and click on generate o/p
//git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/hello-world.git'/

pipeline {
    agent any
    
    stages {
        stage (clone) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

=====================================  MAVEN BUILD STAGE (CHECKOUT AND BUILD) =================================================

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout code) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (test) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

============================================================  INTEGRATE WITH SONARQUBE  =====================================  
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

If you are using maven no need to use sonar scanner

SonarScanner for Maven:

node {
  stage('SCM') {
    git 'https://github.com/foo/bar.git'
  }
  stage('SonarQube analysis') {
    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used
      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
    }
  }
}



============================================ MAVEN & SONAR BUILD STAGE (CHECKOUT AND BUILD & SONAR ANALYSIS) (Jenkinsfile3) ==============================================
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // confugure in configure system Jenkins
	      sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder  
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        }   
    }    
  }
}



=============================================== Nexus upload artifact ==========================================================

https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/
install Nexus Artifact Uploader  plugin in jenkins

http://3.92.207.138:8080/job/scripted%20pipeline/pipeline-syntax/


pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        stage (nexus upload) {
           steps {
              nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: 'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: '1.0-SNAPSHOT'		
              }
        } 
    }    
  }
}

==============================================================

https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/
install Nexus Artifact Uploader  plugin in jenkins

http://3.92.207.138:8080/job/scripted%20pipeline/pipeline-syntax/
select "nexus" and provide all details

Nexus Version: nexus3
Protocol: http
Nexus URL: ip:8081
Credentials: nexus-cred (username/pwd)
GroupId: com.example.maven-project    ( from pom.xml )
Version: 1.0-SNAPSHOT                 ( from pom.xml )
Repository:                       

Artifacts 
ArtifactId: maven-project             ( from pom.xml )
Type: pom                             ( from pom.xml ) <packaging>pom</packaging>
File: server/target/server.jar        ( where jenkins keeping .jar file )

Generate pipeline script and paste in Jenkinsfile

Pom.xml

  <modelVersion>4.0.0</modelVersion> 

  <groupId>com.example.maven-project</groupId>
  <artifactId>maven-project</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Project</name>
  <description>Sample Maven project with a working, deployable site.</description>
  <url>http://www.example.com</url>

artifact id, groupid, type(packaging)

=============================================== Nexus upload then deploy to container ==========================================================


pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        //stage (nexus upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
    }    
  }
}


=============================================== Mail to slack ==========================================================

Install  "Slack Notification" plugin on jenkins UI
Slack Notification
Build Notifiers slack
Integrates Jenkins with Slack, allows publishing build statuses, messages and files to Slack channels.

goto 
http://3.92.207.138:8080/job/scripted%20pipeline/pipeline-syntax/

search for slack
slackSend: send slack message before you need to configure slack with jenkins



pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        //stage (nexus upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
     // stage (slack notification) {
      //   steps {
        //     slackSend channel: 'dev', message: 'Deployment is done'
        //    }
     // } 
    
    }    
  }
}
=========================================== Approval GMAIL NOTIFICATION =====================================================

Install "Email Extension Template" plugin in JenkinsUI

emailext Build Notifiers
This plugin allows administrators to create global templates for the Extended Email Publisher.

CONFIGURE GMAIL SETTINGS:

https://stackoverflow.com/questions/35347269/javax-mail-authenticationfailedexception-535-5-7-8-username-and-password-not-ac

Two Step Verification should be turned off.

Allow Less Secure App(should be turned on).

javax.net.ssl.SSLException: Unsupported or unrecognized SSL message


----------------------------------------------------------------------
Two Step Verification should be turned off.
Allow Less Secure App(should be turned on).

https://support.google.com/accounts/answer/1064203?hl=en
https://myaccount.google.com/lesssecureapps

----------------------------------------------------------------------
javax.net.ssl.SSLException: Unsupported or unrecognized SSL message

https://stackoverflow.com/questions/11628065/error-when-sending-email-with-jenkins
https://accounts.google.com/DisplayUnlockCaptcha

I Had the same issue. After witch hunting a lot, I found a solution as below:

even turn on - less secure apps, I was struggling since 6 hour. the second option: And go to  https://accounts.google.com/DisplayUnlockCaptcha

SMTP SERVER: smtp.gmail.com
Default user e-mail suffix: @gmail.com

Use SMTP Authentication
username: chvinod****@gmail.com
pwd: **************
use: ssl
smtp port: 465

Test configuration by sending test e-mail
Test e-mail recipient
chvinod****@gmail.com  ( use any mail or same smtp )

Test configuration (o/p)
Email was successfully sent

https://www.lifewire.com/what-are-the-gmail-smtp-settings-1170854

https://stackoverflow.com/questions/31076928/kick-off-a-job-after-manual-approval-in-jenkins



https://support.cloudbees.com/hc/en-us/articles/360029265412-How-can-I-approve-a-deployment-and-add-an-optional-delay-for-the-deployment

============================================================= APPROVAL MAIL ===================================================================================

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"                                                                    //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        //stage (sonarqube_analysis) {
           //steps {
              //withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {      // You can override the credential to be used
	      //sh 'mvn sonar:sonar'                                                                        //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              //}
        //} 

        //stage (nexus_upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
        stage ('DEV Approve') {
          steps {
	    mail bcc: '', body: 'BUILD IS TRIGGERED ', cc: '', from: '', replyTo: '', subject: 'BUILD IS TRIGGERED ', to: 'vinodkumar.chenna@gmail.com'
            script {
		    def deploymentDelay = input id: 'Deploy', message: 'Deploy to production?', submitter: 'rkivisto,admin', parameters: [choice(choices: ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'], description: 'Hours to delay deployment?', name: 'deploymentDelay')]
		    sleep time: deploymentDelay.toInteger(), unit: 'HOURS'
		    echo "Taking approval from DEV Manager for QA Deployment"
		    timeout(time: 7, unit: 'DAYS') {
		    input message: 'Do you want to deploy?', submitter: 'admin'
		  }
            }
        }			
     }   
  }
}

=========================================APPROVAL MAIL FOR IRTRACK APP TYPE========================================================

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"      
				//sh "mvn clean //sh //mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        //stage (sonarqubeanalysis) {
            //steps {
              //withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9') {      // You can override the credential to be used
	          //sh 'mvn sonar:sonar'                                                                        //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              //}
        //} 

        //stage (nexus_upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
        stage ('DEV Approve') {
          steps {
            mail to: 'vinodkumar.chenna@gmail.com, chvinodgcp501@gmail.com', cc: 'vinodkumarchenna.gspann@gmail.com,chvinodgcp501@gmail.com', subject: "Please approve production deployment for aperture.gspann.com #${env.BUILD_NUMBER}", 
             body: """
               Hi,
                Please approve below feature for production release.
                 Sn.	Jira			Description
                 1	google         release of 2022
                Please click to approve the release in production : ${BUILD_URL}input/
                """
                input submitterParameter: 'userId', message: 'Ready?'
		}
           }		
     }
}
======================================= git hub actions ============================================

https://www.youtube.com/watch?v=R8_veQiYBjI
















