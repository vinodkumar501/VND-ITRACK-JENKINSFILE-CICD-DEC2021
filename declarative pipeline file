==================>scripted  pipeline <================== start with node { // }

node {     
//
}

===================> declarative  pipeline <==================

start with pipeline and have stages

pipeline{
  agent any  
  //
}
------------------------- Sample Jenkinsfile --------------------------
pipeline {
    agent any
    
    stages {
        stage (build) {
            steps {
                echo "build"
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

============================================ Sample Jenkinsfile2 ======================================
pipeline{
  agent any
  stages{
    stage('check'){
	  steps{
	    sh 'printenv'            // first print env varialbles
	   }
	 }
    stage('build'){
	  steps{
	    echo "running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}"   
		 }
	    }
     }
}

Note:
Declarative Pipeline supports an environment directive, whereas users of Scripted Pipeline must use the withEnv step.

============================================ Sample Jenkinsfile3 ======================================
//user generate pipeline script
//http://3.92.207.138:8080/job/script/pipeline-syntax/
//check pipeline script on bottom we get pipeline syntax --> click on git --> add Url and add cred and click on generate o/p
//git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/hello-world.git'/

pipeline {
    agent any
    
    stages {
        stage (clone) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

=====================================  MAVEN BUILD STAGE (CHECKOUT AND BUILD) =================================================

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout code) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (test) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

============================================================  INTEGRATE WITH SONARQUBE  =====================================  
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

If you are using maven no need to use sonar scanner

SonarScanner for Maven:

node {
  stage('SCM') {
    git 'https://github.com/foo/bar.git'
  }
  stage('SonarQube analysis') {
    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used
      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
    }
  }
}



============================================ MAVEN & SONAR BUILD STAGE (CHECKOUT AND BUILD & SONAR ANALYSIS) (Jenkinsfile3) ==============================================
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // confugure in configure system Jenkins
	      sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder  
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        }   
    }    
  }
}



=============================================== Nexus upload artifact ==========================================================

https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/
install Nexus Artifact Uploader  plugin in jenkins

http://3.92.207.138:8080/job/scripted%20pipeline/pipeline-syntax/


pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        stage (nexus upload) {
           steps {
              nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: 'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: '1.0-SNAPSHOT'		
              }
        } 
    }    
  }
}

==============================================================

https://devopscube.com/how-to-install-latest-sonatype-nexus-3-on-linux/
install Nexus Artifact Uploader  plugin in jenkins

http://3.92.207.138:8080/job/scripted%20pipeline/pipeline-syntax/
select "nexus" and provide all details

Nexus Version: nexus3
Protocol: http
Nexus URL: ip:8081
Credentials: nexus-cred (username/pwd)
GroupId: com.example.maven-project    ( from pom.xml )
Version: 1.0-SNAPSHOT                 ( from pom.xml )
Repository:                       

Artifacts 
ArtifactId: maven-project             ( from pom.xml )
Type: pom                             ( from pom.xml ) <packaging>pom</packaging>
File: server/target/server.jar        ( where jenkins keeping .jar file )

Generate pipeline script and paste in Jenkinsfile

Pom.xml

  <modelVersion>4.0.0</modelVersion> 

  <groupId>com.example.maven-project</groupId>
  <artifactId>maven-project</artifactId>
  <packaging>pom</packaging>
  <version>1.0-SNAPSHOT</version>
  <name>Maven Project</name>
  <description>Sample Maven project with a working, deployable site.</description>
  <url>http://www.example.com</url>

artifact id, groupid, type(packaging)

=============================================== Nexus upload then deploy to container ==========================================================


pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        //stage (nexus upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
    }    
  }
}


=============================================== Mail to slack ==========================================================

Install  "Slack Notification" plugin on jenkins UI
Slack Notification
Build Notifiers slack
Integrates Jenkins with Slack, allows publishing build statuses, messages and files to Slack channels.

goto 
http://3.92.207.138:8080/job/scripted%20pipeline/pipeline-syntax/

search for slack
slackSend: send slack message before you need to configure slack with jenkins



pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        //stage (nexus upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
     // stage (slack notification) {
      //   steps {
        //     slackSend channel: 'dev', message: 'Deployment is done'
        //    }
     // } 
    
    }    
  }
}




















