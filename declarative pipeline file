==================>scripted  pipeline <================== start with node { // }

node {
    
    
    //
 
 
 }

===================> declarative  pipeline <==================

start with pipeline and have stages

pipeline{
  
  agent any 
  
  
  //
 
 
 }
------------------------- Sample Jenkinsfile --------------------------
pipeline {
    agent any
    
    stages {
        stage (build) {
            steps {
                echo "build"
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}


============================================ Sample Jenkinsfile2 ======================================

pipeline{
  agent any
  stages{
    stage('check'){
	  steps{
	    sh 'printenv'            // first print env varialbles
	   }
	 }
    stage('build'){
	  steps{
	    echo "running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}"   
		 }
	    }
     }
}

Note:
Declarative Pipeline supports an environment directive, whereas users of Scripted Pipeline must use the withEnv step.


============================================ Sample Jenkinsfile3 ======================================
//user generate pipeline script
//http://3.92.207.138:8080/job/script/pipeline-syntax/
//check pipeline script on bottom we get pipeline syntax --> click on git --> add Url and add cred and click on generate o/p
//git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/hello-world.git'/

pipeline {
    agent any
    
    stages {
        stage (clone) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/hello-world.git'
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}
















