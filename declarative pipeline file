==================>scripted  pipeline <================== start with node { // }

node {     
//
}

===================> declarative  pipeline <==================

start with pipeline and have stages

pipeline{
  agent any  
  //
}
------------------------- Sample Jenkinsfile --------------------------
pipeline {
    agent any
    
    stages {
        stage (build) {
            steps {
                echo "build"
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

============================================ Sample Jenkinsfile2 ======================================
pipeline{
  agent any
  stages{
    stage('check'){
	  steps{
	    sh 'printenv'            // first print env varialbles
	   }
	 }
    stage('build'){
	  steps{
	    echo "running ${env.BUILD_NUMBER} and job ${env.JOB_NAME}"   
		 }
	    }
     }
}

Note:
Declarative Pipeline supports an environment directive, whereas users of Scripted Pipeline must use the withEnv step.

============================================ Sample Jenkinsfile3 ======================================
//user generate pipeline script
//http://3.92.207.138:8080/job/script/pipeline-syntax/
//check pipeline script on bottom we get pipeline syntax --> click on git --> add Url and add cred and click on generate o/p
//git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/hello-world.git'/

pipeline {
    agent any
    
    stages {
        stage (clone) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (test) {
            steps {
                echo "test"
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

=====================================  MAVEN BUILD STAGE (CHECKOUT AND BUILD) =================================================

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout code) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (test) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (deploy) {
            steps {
                echo "deploy"
           }
       }   
    }    
}

============================================================  INTEGRATE WITH SONARQUBE  =====================================  
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-jenkins/

If you are using maven no need to use sonar scanner

SonarScanner for Maven:

node {
  stage('SCM') {
    git 'https://github.com/foo/bar.git'
  }
  stage('SonarQube analysis') {
    withSonarQubeEnv(credentialsId: 'f225455e-ea59-40fa-8af7-08176e86507a', installationName: 'My SonarQube Server') { // You can override the credential to be used
      sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
    }
  }
}



====================================== Jenkinsfile3 ==============================================

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9.2') {            // You can override the credential to be used
	        
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        }   
    }    
  }
}







































