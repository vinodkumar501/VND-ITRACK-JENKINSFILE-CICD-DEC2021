https://www.youtube.com/watch?v=UjCVCvdI73w

First create a vm specific for sonarqube , if you not specify proper h/w it stop to up.

https://stackoverflow.com/questions/47835125/sonarqube-process-exited-with-exit-value-es-137

By default  "Embedded database should be used for evaluation purposes only" like H2 in sonarqube

NOTE: Embedded database should be used for evaluation purposes only

The embedded database will not scale, it will not support upgrading to newer versions of SonarQube, and there is no support for 
migrating your data out of it into a different database engine.

Java is pre-requisiste for sonarqube

https://docs.sonarqube.org/latest/setup/install-server/
https://www.sonarqube.org/success-download-community-edition/

From sonarqube 7 onwards it need java 11 as pre-requisite

==================================================================== STEP1 ==============================================

login with  #  <ip>:9000           <admin/admin>

Once login --> click select projects -----> manually

name it as "sonarqube-vnd" and create token 

->name it as any like "sonarqube-vnd" and click on generate 
6cbeb10a90d8cbe7b054110363d0b89c3b5b4a9766777

Once token is created you can configure in "manage jenkins" and "configure system"

Id: sonarqube-cred
select kind: secret text and paste token and save

Go to manage Jenkins -->
Install sonarqube plugin 

Go to manage Jenkins --> configure system ->  configure sonarqube

<ip>:9000

Name: sonarqube-9
Server URL: http://3.239.220.22:9000/
Server authentication token: sonarqube-cred


------------------------------------------------------ Jenkinsfile - Declarative -----------------------------------------------------

pipeline {
    agent any
    tools {
      maven 'mvn-3.8.4'
    }
    stages {
        stage (checkout) {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-hello-world-java-pom.xml.git'
		//checkout([$class: 'GitSCM', branches: [[name: 'refs/heads/master']], extensions: [], userRemoteConfigs: [[credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/VND-ITRACK-JENKINSFILE-CICD-DEC2021.git']]])
            }
        }
        stage (build) {
            steps {
                sh "mvn clean install"       //sh "mvn clean install -f mywebapp/prox.xml"   If pom.xml not in root folder
            }
        }
        stage (sonarqube_analysis) {
           steps {
              withSonarQubeEnv(credentialsId: 'sonarqube-cred', installationName: 'sonarqube-9') {            // You can override the credential to be used
			  sh 'mvn sonar:sonar'           //sh "mvn sonar:sonar -f mywebapp/prox.xml"   If pom.xml not in root folder
               //sh 'mvn org.sonarsource.scanner.maven:sonar-maven-plugin:3.7.0.1746:sonar'
              }
        } 

        //stage (nexus upload) {
           //steps {
              //nexusArtifactUploader artifacts: [[artifactId: 'maven-project', classifier: '', file: //'server/target/server.jar', type: 'pom']], credentialsId: 'nexus-cred', groupId: 'com.example.maven-project', //nexusUrl: '3.92.207.138:8081', nexusVersion: 'nexus3', protocol: 'http', repository: 'mvn-snapshot', version: //'1.0-SNAPSHOT'		
              //}
        //} 
		
        //stage (deploy_to_tomcat) {
           //steps {
              //deploy adapters: [tomcat8(path: '', url: 'http://54.82.235.95:8080/')], contextPath: null, war: '**/*.jar'	
              //}
        //}
     // stage (slack notification) {
      //   steps {
        //     slackSend channel: 'dev', message: 'Deployment is done'
        //    }
     // } 
    
    }    
  }
}

------------------------------------------------------- Jenkinsfile-scripted -------------------------------------------------------
node {
   def mvnHome = tool name: 'mvn-3.8.4'                                      //def mvn tool "mvn-3.8.4' name mentioned in global tool configuration
   stage('checkout git scm') {
      git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/vnd-itrack-jenkinsfile-CICD-DEC2021.git'
	   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/ 
	   //use this for above git row creation "generate //pipleinscript
    }
   stage('package'){
      sh "${mvnHome}/bin/mvn -v"
      sh "${mvnHome}/bin/mvn clean package"                                   //you must add "" before interpolation ${mvnHome}
    }
   stage('SonarQube analysis') {
      //def scannerHome = tool 'SonarScanner 4.0';
      withSonarQubeEnv('sonarqube-9') {                                      // If you have configured more  one global server connection, you specify its name
      //sh "${scannerHome}/bin/sonar-scanner"                                // Name should be same as -> "manage jenkins" -> "configure system"
      sh "${mvnHome}/bin/mvn sonar:sonar"
    }
  }
}


================================= HOW TO CHECK THE LOGS  ==================================

[sonaradmivnd@ip-172-31-10-73 ~]$ ls
sonarqube-9.2.3.50713  

[sonaradmivnd@ip-172-31-10-73 ~]$ cd sonarqube-9.2.3.50713/
[sonaradmivnd@ip-172-31-10-73 sonarqube-9]$ ls
bin  conf  COPYING  data  dependency-license.json  elasticsearch  extensions  lib  logs  temp  web

[sonaradmivnd@ip-172-31-10-73 sonarqube-9]$ cd logs/
[sonaradmivnd@ip-172-31-10-73 logs]$ ls
access.log  ce.log  es.log  README.txt  sonar.20211221.log  web.log

cat access.log
cat sonar.20211221.log

================================== CHANGE SONAR PORT AND CONFIGURATION ==================================

GO TO CONFIGURATION 

$ pwd
/home/sonaradmivnd/sonarqube-9/conf

ls
sonar.properties  wrapper.conf

vi sonar.properties

go to path "webserver" and update ,by default its commented and works on 9000 if you want to update uncommenct and restart sonarqube (107 line)

# TCP port for incoming HTTP connections. Default value is 9000.
#sonar.web.port=9000
sonar.web.port=8000

IF YOU WANT UPDATE PORT ONLY CHANGE THAT BY DEFAULT IT ACCESS 9000 ( EVEN IF COMMENTED )

---------------> Once update restart sonarqube <-------------------

[sonaradminvnd@ip-172-31-10-73 home]$ ls
ec2-user  nexus  sonaradmin  sonaradminvnd

cd /home/sonaradmivnd/sonarqube-9/bin/linux-x86-64
[sonaradmivnd@ip-172-31-10-73 linux-x86-64]$ ls
lib  SonarQube.pid  sonar.sh  wrapper

[sonaradmivnd@ip-172-31-10-73 linux-x86-64]$ ./sonar.sh stop
Gracefully stopping SonarQube...
Stopped SonarQube.

[sonaradmivnd@ip-172-31-10-73 linux-x86-64]$ ./sonar.sh start
Starting SonarQube...
Started SonarQube.

[sonaradmivnd@ip-172-31-10-73 linux-x86-64]$ ./sonar.sh status
SonarQube is running (14071).

access with <ip>:8000

by default credentials are      --> admin/admin   once login we need to update password   ---> admin/root




