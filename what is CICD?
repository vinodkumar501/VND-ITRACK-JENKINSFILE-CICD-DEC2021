https://www.youtube.com/watch?v=k2aNsQKwyOo
WHAT IS CI?
CI is a process where team members continuouslu integrate the work continuously in a shared repo

best achieved using some scm tools like GIT

can be daily or as needed every integration or checkin in the repo is validated by automated build or unit test or integration tests

Dev ---> test ----> deploy

CD?
continuous delivery

After CI process and running automation tests to ensure the build is ready for the release
ensure the build is deployable state

STAGING:
pre-prod or production ready replica env

Dev   --> test ---> staging --------Prod
------CD(delivery)------->
---CI------>
------------------------------------>(CD(deployment))

all these processes will automatically trigger called CI/CD pipeline.

CONTINUOUS DEPLOYMENT:
---------------------
CI and CD(delivery)

Automated deployment to prod
Every change that passed through automation tests is deployed to production

BUT this may not be used or practical in most organisatins , they donot have frequent or sooshort releases.
like FB Continuous frequent or short Deployment will use 
every deployment will pass through all stages it directly deploy to prod env ----> Deployment

what is CI?
place where multiple team members can integrate their work and stored in a shared repo and some testcases 

what is CD?
CI to staging like 
( after CD our code will be ready for productin ready code)

What is Deployment (CI)?
From CI to till prod


----------------------------------------------CICD Pipeline------------------------------------------------
https://www.youtube.com/watch?v=m0a2CzgLNsc

Devops?
Devops is software development approach which involves continuous development, build,integration, test,deploy and monitoring throughout the lifecycle.

Devops stages:

1.Version control : (SCM)
manage different version of source code

2.CI ( jenkins ): (continuous build )
building appn code continuously
Scenario:
Dev makes changes code CI server will pull the code and build the code ( not compile )
build not just compiling: build means validate, compile ,codereview ,build and unit(individual part) and integration(how different parts work together) testing 

3.Continuous Delivery:( cont testing)
Deploying build appn to test server and perform UAT ( staging area)

4.Cont Deploy:
deploy the tested appn code on to prod env

CI ----> SDLC

CI& CD
--> version control --> build(compile) --> unittest --> Deploy( stage area) -->auto test ( sanity test)--> Deploy to prod --> prod feedback

unit test:
breack complete s/w into small chunks

Integration test:
all these individual tested parts will check working proper or eachother or not

Pipeline:
logical or series of steps how sdlc will occur.

CICD: code will deliver shorter time to market

mvn install:
install all dependencies required to compile the appn
once all done then docker will deploy, once appn will process all tests successfully then use docker deploy it.

-------------------------- https://www.youtube.com/watch?v=HjXTSbXG1k8 --------------------------------
https://www.youtube.com/watch?v=HjXTSbXG1k8

INTEGRATION:
pushing code and perform test

Delivery:
making available for deployment ( production ready code )

cont Deployment:
When you commit your code after automation test it automatically goes to production when sth wrong you are in trouble.
not every company do Cont Deployment so few only do this, mostly company go for CI 

eg: facebook

Dev(commit) --->github --->build&automation test --->production ( manual deploy)

SDLC tools:
Git, Jenkins, Maven, Gradle, Sonarqube, JIRA 


DEVOPS:
Responsible for build code and deploy and basic testing (validation) once its done, approve they can share build code to qa for rest of testing.

deployment: create build from code

CI:  (Build + test)
Devlop the code + build + test 
Qa ---> Dev

Cont delivery: (release)
Enhancement to CI , build is done test is done ---> release that build to customer

CICD--> Build + test +release
https://www.youtube.com/watch?v=1ji_9scA2C4

CICD?
Dev will write code and store in shared repo (SCM) github from there jenkins will take code build and do basic testing -----> CI
once basic test is done qa team will take build and do some more tests and all done they deploy to prod.


---------------------------------------------------- PIPELINE:----------------------------------------------------

Execute multiple jobs in sequence manner

Dev --> commit --> build --> test -->stage --> Deploy dev/qa --> prod
-------------------------->CICD <--------------------------

build pipeline plugin ---> useful for few jobs (each task we need to create job )and integrate all
but it useful for few jobs only. so jenkinsfile use

Jenkinsfile: ( prefer for more no of jobs are there )
1.Declarative pipeline:
if I create file using groovy script that file is called  jenkinsfile that file will be there in central repo, that file run in jenkins ----> declarative jenkinsfile

2.Scripted pipeline: groovy:
just write small groovy script inside jenkins directly.

pipeline: is a job inside each and everything like subjob
https://www.jenkins.io/doc/book/pipeline/syntax/

STEP:
most fundamental part of a Pipeline is the "step". Basically, steps tell Jenkins what to do and serve as the basic building block for both Declarative 
and Scripted Pipeline syntax.

========================================== Declarative Pipeline ========================================== 
Declarative Pipeline is a relatively recent addition to Jenkins Pipeline [1] which presents a more simplified and opinionated syntax on top of the Pipeline sub-systems.

All valid Declarative Pipelines must be enclosed within a pipeline block, for example:

pipeline {
    /* insert Declarative Pipeline here */
}

The top-level of the Pipeline must be a block, specifically: pipeline { }.

Limitations
There is currently an open issue which limits the maximum size of the code within the pipeline{} block. This limitation does not apply to Scripted pipelines

agent:
The agent section specifies where the entire Pipeline, or a specific stage, will execute in the Jenkins environment depending on where the agent section is placed.
The section must be defined at the top-level inside the pipeline block, but stage-level usage is optional.

Parameters
In order to support the wide variety of use-cases Pipeline authors may have, the agent section supports a few different types of parameters. These parameters can be applied at the top-level of the pipeline block, or within each stage directive.

-> any
Execute the Pipeline, or stage, on any available agent. For example: agent any

pipeline{
agent any 
}

-> label
A string. The label or label condition on which to run the Pipeline or individual stage.

This option is valid for node, docker, and dockerfile, and is required for node.

PIPELINE:
We can execute multiple jobs in sequential manner ---> all include in Jenkinsfile

If your jobs are increasing it make much complex to add in build pipeline plugin so use Jenkinsfile ( in groovy script)
every job consider as stage --- in jenkinsfile
Just need to define all in script will run one after another ----> this approach is involved if more no of activitise or jobs involved.

Single pipeline ---> all we included all job 
pipline as job ---> inside are subjobs


DECLARATIVE:
If create a script( jenkinsfile) then that file in central repo along with project that file and run it in jenkins -----Declarative pipeline

Pipeline:
 Pipeline is a user defined model of CD pipeline, pipeline code defines your entire build process,which typically includes stages for building an appn , testing it and 
 then delivering
 
pipeline block is a key part of declarative pipeline syntanx


node:
is a machine which is part of jenkins env and is capable of executing a pipeline.
node --> is a block scripted pipeline syntax

stage:
set of tasks performed over pipeline

step:
single task, tells what to do in point in time 
ex: execute make command use sh step

sh 'make'

-------------------------------- scripted pipeline -------------------------------

node {                         //execute this pipeline or any of its stages 0n any of its available agents 
   stage(build) {              //stage blocks are optional in scripted syntax, however implementing stage blocks in scripted pipeline provides clear visualisation of eac stage subset of tasks or steps in jenkins UI 
     //                        //perform some steps related to build stage
   }
   stage(test) {
     //                       
   }
   stage(deploy) {
     //
   }
}


----------------
pipleine script:              used for scritped pipeline, write in jenkins UI
pipelin script from scm :     declarative scripted pipeline


node {
   stage('build') {                        // donot have stages 
      echo "building the project"        // no need to use steps stage
   }
   stage('test') {
      echo "test the project"
   }
   stage('deploy') {
      echo "deploy the project"
   }
   stage('release') {
      echo "release the project"
   }
 }

O/P:

Started by user vinod kumar
[Pipeline] Start of Pipeline
[Pipeline] node
Running on Jenkins in /var/lib/jenkins/workspace/scripted pipeline
[Pipeline] {
[Pipeline] stage
[Pipeline] { (build)
[Pipeline] echo
building the project
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (test)
[Pipeline] echo
test the project
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (deploy)
[Pipeline] echo
deploy the project
[Pipeline] }
[Pipeline] // stage
[Pipeline] stage
[Pipeline] { (release)
[Pipeline] echo
release the project
[Pipeline] }
[Pipeline] // stage
[Pipeline] }
[Pipeline] // node
[Pipeline] End of Pipeline
Finished: SUCCESS
--------------------------------- Declarative pipline ----------------------------------
git hub:

https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git

https://www.youtube.com/watch?v=Ozna0MS5D1E

https://github.com/vinodkumar501/JenkinsPipelineDemoProject

https://www.jenkins.io/doc/book/pipeline/jenkinsfile/

we need to create Jenkinsfile , this file should be there in scm system (git).
scripted is in jenkins UI only

scripted: we directly write scripts inside jenkins
declarative: write script in Jenkinsfile ( store in git ) along with our project


pipeline {                          //creates pipeline
    agent any                       //execute this pipeline or any of its stages 0n any of its available agents
    stages {
       stage('build') {               //enter to build stage
       steps {                      // perform some steps related to build stage
         //
         echo "build"
         }
       }
       stage('test') {
       steps {
         //
         echo "test"
         }
       }
       stage('deploy') {
       steps {
         //
         echo "deploy"
        }
      }
   }
}

============================
The Declarative Pipeline example above contains the minimum necessary structure to implement a continuous delivery pipeline.
The agent directive, which is required, instructs Jenkins to allocate an executor and workspace for the Pipeline. Without an agent directive, not only is the Declarative Pipeline not valid, it would not be capable of doing any work! By default the agent directive ensures that the source repository is checked out and made available for steps in the subsequent stages`

The stages directive, and steps directives are also required for a valid Declarative Pipeline as they instruct Jenkins what to execute and in which stage it 
should be executed.

Jenkinsfile (Scripted Pipeline)
-------------------------------------
node {
  stage {
    checkout "scm"
    }
}


The checkout step will checkout code from source control; scm is a special variable which instructs the checkout step to clone the specific revision which triggered
this Pipeline run.

https://www.jenkins.io/blog/2017/02/07/declarative-maven-project/

pipeline{
agent any
tools { 
        maven 'mvn-3.8.4' 
        jdk 'jdk-1.8' 
    }
stages 
{
stage('Build') 
{
steps{
echo "Building the Code.........."
sh "mvn clean"                             //bat "mvn clean" --> for windows
}
}
stage('Test') 
{
steps{
echo "Testing the Code.........."
sh "mvn test"
}
}
stage('Compile') 
{
steps{
echo "Compiling the Project.........."
sh "mvn compile"
}
}
stage('Deploy') 
{
steps{
echo "Deploying the Project.........."
}
}
}
}

--------------------------------  OR ---------------------------------------------

pipeline{
agent any
tools { 
        maven 'mvn-3.8.4'  //names written or configured in jenkins, global tool configuration
        jdk 'jdk-1.8' 
    }
stages {
         stage('Build') {
         steps{
         echo "Building the Code.........."
         sh "mvn clean"                             //bat "mvn clean" --> for windows
          }
        }
         stage('Test') {
         steps{
         echo "Testing the Code.........."
         sh "mvn test"
           }
        }
         stage('Compile') {
         steps{
         echo "Compiling the Project.........."
         sh "mvn compile"
          }
       }
         stage('Deploy') {
         steps{
         echo "Deploying the Project.........."
          }
       }
    }
}

-----------------------
On your SCM code you need to include Jenkinsfile and pom.xml for maven

If you not include pom.xml will get below error.

[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (/var/lib/jenkins/workspace/declarative pipeline). Please verify you invoked Maven from the correct directory. -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MissingProjectException







