Jenkins-Pipeline project 

Dev --> commit --> github --> jenkins --->Build docker image -->push to docker hub --> pull docker image ---> deploy to Dev

Create 2 VMS 1.jenkins node and 2.Dev nodes in cloud

//http://3.91.213.151:8080/job/scripted%20pipeline/pipeline-syntax/

git credentialsId: 'git-cred-vnd', url: 'https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git'

The above details you get in pipeline-synntax 


STEP1: CHECKOUT GIT CLONE
============================================= STEP1 ===========================================================
node {
   stage('checkout git scm') {
    git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/vnd-itrack-jenkinsfile-CICD-DEC2021.git'
	   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/ use this for above git row creation "generate //pipleinscript
    }
}
=========================================================================================================================================

trigger build and check
1.cloning repo 
2.using git-cred-vnd credentials login to github ( pvt repo )
3.clone master branch

using credential git-cred-vnd
 > git rev-parse --resolve-git-dir /var/lib/jenkins/workspace/declarative pipeline/.git # timeout=10
Fetching changes from the remote Git repository
 > git config remote.origin.url https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git # timeout=10
Fetching upstream changes from https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git
 > git --version # timeout=10
 > git --version # 'git version 2.32.0'
 
using GIT_ASKPASS to set credentials git-cred
 > git fetch --tags --force --progress -- https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git rev-parse refs/remotes/origin/master^{commit} # timeout=10
 
 build is using master branch ( if we not specify any by defautl it take master only) if you need other branch
 
 
Goto tools maven 
STEP2: CHECKOUT AND MVN BUILD (in scripted pipeline)
================================== STEP2: CHECKOUT AND MVN BUILD (in scripted pipeline) =========================================

node {
   stage('checkout git scm') {
   git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git', branch: 'devops-noc'
	   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/ use this for above git row creation "generate //pipleinscript
    }
   stage('mvn package'){
   sh 'mvn clean package'  
   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/        //use sh: shell script
  }
 }

============================== O/P failed with below error =========================================

O/P:
+ mvn clean package
/var/lib/jenkins/workspace/declarative pipeline@tmp/durable-5233be8f/script.sh: line 1: mvn: command not found

SOL:
Jenkins not able to find mvn installed so we need to add it an explicitly





========================================STEP2: Checkout and mvn build (in scripted pipeline) NEED TO DEFINE mvnHome to pick mvn =======================================

This details you will get at below step
http://3.91.213.151:8080/job/scripted%20pipeline/pipeline-syntax/

Go to tools :

select tool type as maven: tool: 3.8.4

Generate pipeline script
O/P
tool name: 'mvn-3.8.4', type: 'maven'
================================================ STEP2 =============================================================

node {
   tool name: 'mvn-3.8.4', type: 'maven'
   stage('checkout git scm') {
   git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/JenkinsPipelineDemoProject.git'
	   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/ use this for above git row creation "generate //pipleinscript
    }
   stage('mvn package'){
   def mvnHome = tool name: 'mvn-3.8.4', type: 'maven'
   def mvnCMD = "${mvnHome}/bin/mvn"             //you must add "" before interpolation ${mvnHome}
   sh "${mvnCMD} clean package"                  //you must add "" before interpolation ${mvnHome}
  }
}
 
=====================================================================================================================

click on build

O/P:
Building jar: /var/lib/jenkins/workspace/scripted pipeline/target/JenkinsPipelineDemoPrjoject-vnd-01-SNAPSHOT.jar

Here /var/lib/jenkins/workspace/scripted pipeline  ------> job name 
jar file stored in /target/JenkinsPipelineDemoPrjoject-vnd-01-SNAPSHOT.jar



=================================================== STEP3: BUILD DOCKER IMAGE==================================================

Install DOCKER PLUGIN in Jenkins then configure it in 

Manage Jenkins --> Global tool configuration --> Docker --> install automatically (click on ) , select version then save

STEP3: BUILD DOCKER IMAGE
for this you have install docker in your jenkins and has permissions to push images to docker and Dockerfile in your source code
install docker plugin 	 " Docker Pipeline "  --->Deployment DevOps docker pipelin  ---> Build and use Docker containers from pipelines.


==================================================  =====================================

//https://medium.com/swlh/jenkins-pipeline-to-create-docker-image-and-push-to-docker-hub-721919512f2


node {
   stage('checkout git scm') {
      git credentialsId: 'git-cred', url: 'https://github.com/vinodkumar501/vnd-itrack-jenkinsfile-CICD-DEC2021.git'
	   //http://3.94.101.38:8080/job/declarative%20pipeline/pipeline-syntax/ use this for above git row creation "generate //pipleinscript
    }
   stage('package'){
      def mvnHome = tool name: 'mvn-3.8.4', type: 'maven'
      def mvnCMD = "${mvnHome}/bin/mvn"
      sh "${mvnCMD} clean package"          //you must add "" before interpolation ${mvnHome}
    }
   stage('build'){
      sh 'docker build -t vinodkumarch/myjavapp-1.0.0 .'
    }
}

------------------------------------------------------------------------------------------------









